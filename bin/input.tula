let Bin { 0 1 }

case Inc 0 1 -> Halt
case Inc 1 0 -> Inc

run Inc { 0 0 0 0 1 0 }
trace Inc { 1 1 1 0 1 0 }

case Inc2 000 111 -> Halt2
case Inc2 111 000 -> Inc2

run Inc2 { 000 000 000 000 111 000 }
trace Inc2 { 111 111 111 000 111 000 }

for a in Bin
case Skip a a -> Skip
case Skip & done <- Done

trace Skip { 1 0 0 1 0 1 0 & }

let Brackets { [ ] }
trace StartCounting { ! [ ] [ [ ] ] ? _ _ _ _ _ _ _ _ _ _ _ }

case StartCounting ! ! -> Pick
case Pick [ ! -> Count[
case Pick ] ! -> Count]

for b in Brackets
case Count[ b b -> Count[
case Count[ ? ? -> Inc

for b in Brackets
case Count] b b -> Count]
case Count] ? ? -> Dec

case Inc * * -> Inc
case Inc _ * <- Reset

case Reset ? ? <- Reset
case Reset * * <- Reset
for b in Brackets
case Reset b b <- Reset
case Reset ! ! -> Pick

case Dec * * -> Dec
case Dec _ _ <- Dec1
case Dec1 * _ <- Reset
case Dec1 ? ? <- Unbalanced
